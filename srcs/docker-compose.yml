#version: '3.8'

services:
  # NGINX Web Server Service
  nginx:
    container_name: nginx
    build: ./requirements/nginx  # Simple form: just the directory path
    # OR
    #build:
      #context: ./requirements/nginx    #Build context directory
      #dockerfile: Dockerfile          #Dockerfile name (default is "Dockerfile")
    depends_on:
      - wordpress # This service waits for 'wordpress' service to start first
    ports:
      - 443:443 # External HTTPS access #Maps port 443 on your machine to port 443 in container
    volumes:
      - wordpress_data:/var/www/html #named_volume:container_path #Shares data between containers
    networks:
      - inception_network
      #- network # Connects to a custom network named "network"
    restart: always # Container restarts automatically if it stops
    # OR:
    # restart: unless-stopped  # Restart unless manually stopped
    # restart: on-failure     # Only restart on failure
    # restart: no             # Never restart

  # MARIADB DATABASE
  mariadb:
    # env_file: .env  # Passes ALL variables to container
    build: ./requirements/mariadb
    container_name: mariadb
    environment:
      MYSQL_HOSTNAME: ${MYSQL_HOSTNAME}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # MYSQL_DATABASE: ${MYSQL_DATABASE}
      # MYSQL_USER: ${MYSQL_USER}
      # MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mariadb_data:/var/lib/mysql
    networks:
      - inception_network
      #- network
    restart: unless-stopped

  # WORDPRESS
  wordpress:
    build: ./requirements/wordpress
    container_name: wordpress
    depends_on:
      - mariadb
    environment:
      # Database connection for WordPress
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_HOSTNAME: ${MYSQL_HOSTNAME}
      # WordPress admin configuration
      WP_ADMIN_USER: ${WP_ADMIN_USER}
      WP_ADMIN_PASSWORD: ${WP_ADMIN_PASSWORD}
      WP_ADMIN_EMAIL: ${WP_ADMIN_EMAIL}
      WP_URL: ${WP_URL}
      WP_TITLE: ${WP_TITLE}
      WP_USER: ${WP_USER}
      WP_USER_PASSWORD: ${WP_USER_PASSWORD}
      WP_USER_EMAIL: ${WP_USER_EMAIL}
    volumes:
      - wordpress_data:/var/www/html
    networks:
      - inception_network
      #network
    restart: unless-stopped

  # BONUS: redis
  redis:
    build: ./bonus/redis
    container_name: redis
    #image: redis:latest #no image needed -> Dockerfile to do docker build
    #ports: NO ports needed (internal connection only)
    networks:
      - inception_network
    restart: always
    
  # BONUS: adminer
  adminer:
    build: ./bonus/adminer
    container_name: adminer
    networks:
      - inception_network
    restart: always


# VOLUMES #Named volumes for data persistence
volumes:
  # mariadb volume
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_DIR}/mariadb_data
      #device: /home/${USER}/data/mariadb
      o: bind
  
  # wordpress volume
  wordpress_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_DIR}/wordpress_data
      #device: /home/${USER}/data/wordpress
      o: bind

  # redis volume
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_DIR}/redis_data
      o: bind

  # adminer volume  
  adminer_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_DIR}/adminer_data
      o: bind

# NETWORKS
# # Custom network for service communication
networks:
  inception_network:
    driver: bridge



# **************************************************************************** #
#                                  NOTES                                       #
# **************************************************************************** #

# depends_on:
#     Adds a service dependency on wordpress, ensuring nginx will wait for wordpress to start first.
#     This is especially useful because your Nginx nginx.conf is forwarding PHP requests to fastcgi_pass wordpress:9000.

# restart: 
# restart: unless-stopped => more graceful than restart: always. It ensures services are not restarted if manually stopped, yet they auto-restart after a failure or reboot
# always : Container restarts automatically if it stops
# unless-stopped :Restart unless manually stopped
# on-failure : Only restart on failure
# no : Never restart

# driver: local	Use Dockerâ€™s default volume driver (local)
# driver_opts:	Additional options for the volume
# type: none	Used when mounting a host directory directly (instead of Docker managing it)
# device:	The path on your host machine to use as the volume
# o: bind	Bind-mount type: mounts the exact directory you specify (not a managed volume)

